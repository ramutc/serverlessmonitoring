AWSTemplateFormatVersion: '2010-09-09'

Resources:
  WebsiteStatusLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import requests

          def lambda_handler(event, context):
              url = event['https://www.linkedin.com/feed/']
              response = requests.get(url)
              status_code = response.status_code
              return {
                  'statusCode': status_code
              }
      Handler: index.lambda_handler
      Role: !GetAtt WebsiteStatusLambdaRole.Arn
      Runtime: python3.8

  WebsiteStatusLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: WebsiteStatusLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*

  WebsiteStatusSchedule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: rate(5 minutes)
      State: ENABLED
      Targets:
        - Arn: !GetAtt WebsiteStatusLambdaFunction.Arn
          Id: "TargetFunctionV1"

  WebsiteStatusLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/website-status

  CloudTrail:
    Type: AWS::CloudTrail::Trail
    Properties:
      S3BucketName: YOUR_TRAIL_BUCKET_NAME
      IsLogging: true
      EnableLogFileValidation: true
      IncludeGlobalServiceEvents: true

Outputs:
  WebsiteStatusFunctionArn:
    Value: !GetAtt WebsiteStatusLambdaFunction.Arn
